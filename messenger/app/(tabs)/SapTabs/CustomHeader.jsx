import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TextInput, TouchableOpacity, View, FlatList } from 'react-native';
import { useWebSocket } from '@/WebSoket/WSConnection';
import { GetToken } from '../../../JwtTokens/JwtStorege';

const CustomHeader = ({ route, navigation }) => {
    const [inputValue, setInputValue] = useState(''); // –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [users, setUsers] = useState([]); // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [showResults, setShowResults] = useState(false); // –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    const socket = useWebSocket();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const handleSearch = async () => {
        if (!inputValue.trim()) {
            // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return;
        }
        try {
            const JwtToken = await GetToken();
            const message = {
                type: 'SearchUser',
                JwtToken: JwtToken,
                searchQuery: inputValue,
            };
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify(message));
            } else {
                console.error('WebSocket not open');
            }
        } catch (error) {
            console.error('Error sending message:', error);
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ inputValue —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    useEffect(() => {
        const timerId = setTimeout(() => {
            handleSearch(); // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ 500 –º—Å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
        }, 500);

        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –≤–≤–æ–¥–µ
        return () => clearTimeout(timerId);
    }, [inputValue]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket
    useEffect(() => {
        if (!inputValue.trim()) {
            // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return;
        }
        const handleMessage = (event) => {
            const response = JSON.parse(event.data);

            if (response.success && response.data) {
                setUsers(response.data);
                setShowResults(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            }
        };

        if (socket) {
            socket.addEventListener('message', handleMessage);
            return () => {
                socket.removeEventListener('message', handleMessage);
            };
        }
    }, [socket]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ø–ª–∞—à–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    useEffect(() => {
        if (showResults) {
            const hideResultsTimeout = setTimeout(() => {
                setShowResults(false);
            }, 10000); // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

            return () => clearTimeout(hideResultsTimeout); // –ß–∏—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        }
    }, [showResults]);

    // –°–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∏–Ω–ø—É—Ç–µ
    const handleFocus = () => {
        setShowResults(false); // –°–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –∏–Ω–ø—É—Ç–µ
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const renderUserItem = ({ item }) => (
        <TouchableOpacity onPress={() => ClickInSearch(item.username)} style={styles.chatItem}>
            <View style={styles.userItem}>
                <Text>{item.username}</Text>
            </View>
        </TouchableOpacity>
    );

    const ClickInSearch = (username) => {
        if (!inputValue.trim()) {
            // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return;
        }
        setInputValue('');
        navigation.navigate("Chat", { title: username });
    }

    return (
        <View style={styles.headerContainer}>
            <Text style={styles.headerTitle}>–î–∏–∞–ª–æ–≥–∏</Text>
            <View style={styles.searchContainer}>
                <TextInput
                    style={styles.input}
                    placeholder="üîç –ü–æ–∏—Å–∫..."
                    value={inputValue}
                    onChangeText={setInputValue}
                    onFocus={handleFocus} // –°–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –∏–Ω–ø—É—Ç–µ
                />
            </View>
            {showResults && users.length > 0 && (
                <View style={styles.resultsContainer}>
                    <FlatList
                        data={users}
                        keyExtractor={(item, index) => item.username + index}
                        renderItem={renderUserItem}
                    />
                </View>
            )}
        </View>
    );
};

const styles = StyleSheet.create({
    headerContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        flex: 1,
        paddingHorizontal: 15,
        position: 'relative',
    },
    headerTitle: {
        fontSize: 30,
        fontWeight: 'bold',
    },
    searchContainer: {
        marginLeft: 15,
        marginTop: 7,
        flexDirection: 'row',
        alignItems: 'center',
    },
    input: {
        width: 200,
        height: 35,
        backgroundColor: 'white',
        paddingLeft: 10,
        borderRadius: 20,
        borderWidth: 1,
        borderColor: 'gray',
        marginRight: 10,
    },
    resultsContainer: {
        position: 'absolute',
        top: 50, // –†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        right: 15,
        width: 200,
        backgroundColor: 'white',
        borderRadius: 10,
        borderWidth: 1,
        borderColor: 'gray',
        maxHeight: 200,
        elevation: 3,
    },
    userItem: {
        padding: 10,
        borderBottomWidth: 1,
        borderBottomColor: '#ccc',
    },
});

export default CustomHeader;
